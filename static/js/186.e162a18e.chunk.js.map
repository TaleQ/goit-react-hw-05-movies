{"version":3,"file":"static/js/186.e162a18e.chunk.js","mappings":"mTAEMA,EAAU,mCAEHC,EAAkB,mCAAG,WAAMC,GAAN,gFAQ1BC,EAAe,IAAIC,gBAPV,CACbC,QAASL,EACTM,MAAOJ,EACPK,SAAU,QACVC,KAAM,EACNC,eAAe,IANe,SASTC,EAAAA,EAAAA,IAAA,oDACwBP,EAAaQ,aAV5B,cAS1BC,EAT0B,yBAYzBA,EAASC,MAZgB,2CAAH,sDAelBC,EAAmB,mCAAG,6FAC3BC,EAAS,CACbV,QAASL,EACTgB,WAAY,QACZC,YAAa,OACbV,SAAU,SALqB,SAOVG,EAAAA,EAAAA,IAAA,gDACoBK,EAAOC,WAD3B,YACyCD,EAAOE,YADhD,oBACuEF,EAAOV,UARpE,cAO3BO,EAP2B,yBAU1BA,EAASC,MAViB,2CAAH,qDAanBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,oBACoCnB,IAF5B,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBO,EAAc,mCAAG,WAAMD,GAAN,uFACLT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFvC,cACtBY,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdQ,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFpC,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,kFC5CjBS,EAAgBC,EAAAA,QAAAA,IAAH,oNAUbC,EAAUD,EAAAA,QAAAA,IAAH,sZ,SCVPE,EAAS,kBACpB,SAACH,EAAD,WACE,SAACE,EAAD,KAFkB,C,mLCKTE,EAAU,WACrB,IAAQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAAoCS,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aACnB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,2FACtBL,GAAa,GADS,mBAGDT,EAAAA,EAAAA,IAAkBF,GAHjB,OAGdN,EAHc,OAIpBoB,EAAgBpB,EAAKuB,SAJD,gDAMpBC,QAAQC,IAAR,kEANoB,yBAQpBR,GAAa,GARO,4EAAH,qDAWrBK,GAED,GAAE,KAGD,gCACGN,IAAa,SAAC,IAAD,KACd,SAAC,KAAD,UACGG,EAAaO,OAAS,GACrB,wBACGP,EAAaQ,KAAI,SAAAC,GAAM,OACtB,2BACE,0BACE,uCACA,SAAC,KAAD,UAAaA,EAAOC,aAEtB,uBAAID,EAAOE,YALJF,EAAOG,GADM,OAW1B,uEAKT,EAED,W,6OClDaC,EAAetB,EAAAA,QAAAA,OAAH,sNAYZuB,EAAYvB,EAAAA,QAAAA,IAAH,+JAWTwB,EAAaxB,EAAAA,QAAAA,GAAH,4EAMVyB,EAAazB,EAAAA,QAAAA,GAAH,sJASV0B,EAAa1B,EAAAA,QAAAA,KAAH,mEAKV2B,EAAa3B,EAAAA,QAAAA,IAAH,qGAMV4B,EAAc5B,EAAAA,QAAAA,GAAH,8C","sources":["api/Api.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async searchQuery => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n  };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`\n  );\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week',\n    language: 'en-US',\n  };\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const LoaderOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 500ms linear, visibility 500ms linear;\n`;\n\nexport const Spinner = styled.div`\n  position: absolute;\n  top: calc(50% - 60px);\n  left: calc(50% - 60px);\n  width: 120px;\n  border: 16px solid #3f51b5;\n  border-top: 16px solid rgba(174, 175, 165, 1);\n  border-radius: 50%;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { LoaderOverlay, Spinner } from './Loader.styled';\n\nexport const Loader = () => (\n  <LoaderOverlay>\n    <Spinner />\n  </LoaderOverlay>\n);\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useCustomContext } from 'context/Context';\nimport { fetchMovieReviews } from 'api/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieThumb, StyledSpan } from 'pages/MovieDetails/MovieDetails.styled';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const { isLoading, setIsLoading } = useCustomContext();\n  const [movieReviews, setMovieReviews] = useState([]);\n\n  useEffect(() => {\n    const getMovieReviews = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchMovieReviews(movieId);\n        setMovieReviews(data.results);\n      } catch (error) {\n        console.log(`Oops, something went wrong. ${error}. Try again later.`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieReviews();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <MovieThumb>\n        {movieReviews.length > 0 ? (\n          <ul>\n            {movieReviews.map(review => (\n              <li key={review.id}>\n                <p>\n                  <span>Author:</span>\n                  <StyledSpan>{review.author}</StyledSpan>\n                </p>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>There are no reviews for this movie yet</p>\n        )}\n      </MovieThumb>\n    </>\n  );\n};\n\nexport default Reviews;\n","import styled from 'styled-components';\n\nexport const GoBackButton = styled.button`\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  background-color: #141e58;\n  color: #fff;\n  border-radius: 4px;\n  border-style: none;\n  opacity: 0.6;\n  &:hover {\n    opacity: 1;\n  }\n`;\nexport const MovieCard = styled.div`\n  padding: 15px;\n  padding-bottom: 20px;\n  display: flex;\n  gap: 15px;\n  text-align: justify;\n  h1 {\n    text-align: left;\n  }\n`;\n\nexport const GenresList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const GenresItem = styled.li`\n  padding: 10px;\n  background-color: #141e58;\n  color: #fff;\n  border-radius: 4px;\n  border: 1px solid;\n  opacity: 0.6;\n`;\n\nexport const StyledSpan = styled.span`\n  margin-left: 5px;\n  font-weight: bold;\n`;\n\nexport const MovieThumb = styled.div`\n  padding: 15px;\n  padding-bottom: 20px;\n  border-top: 1px solid #141e58;\n`;\n\nexport const AddInfoLink = styled.li`\n  margin-bottom: 5px;\n`;\n"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","LoaderOverlay","styled","Spinner","Loader","Reviews","useParams","useCustomContext","isLoading","setIsLoading","useState","movieReviews","setMovieReviews","useEffect","getMovieReviews","results","console","log","length","map","review","author","content","id","GoBackButton","MovieCard","GenresList","GenresItem","StyledSpan","MovieThumb","AddInfoLink"],"sourceRoot":""}