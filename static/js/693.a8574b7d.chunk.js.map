{"version":3,"file":"static/js/693.a8574b7d.chunk.js","mappings":"mTAEMA,EAAU,mCAEHC,EAAkB,mCAAG,WAAMC,GAAN,gFAQ1BC,EAAe,IAAIC,gBAPV,CACbC,QAASL,EACTM,MAAOJ,EACPK,SAAU,QACVC,KAAM,EACNC,eAAe,IANe,SASTC,EAAAA,EAAAA,IAAA,oDACwBP,EAAaQ,aAV5B,cAS1BC,EAT0B,yBAYzBA,EAASC,MAZgB,2CAAH,sDAelBC,EAAmB,mCAAG,6FAC3BC,EAAS,CACbV,QAASL,EACTgB,WAAY,QACZC,YAAa,OACbV,SAAU,SALqB,SAOVG,EAAAA,EAAAA,IAAA,gDACoBK,EAAOC,WAD3B,YACyCD,EAAOE,YADhD,oBACuEF,EAAOV,UARpE,cAO3BO,EAP2B,yBAU1BA,EAASC,MAViB,2CAAH,qDAanBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,oBACoCnB,IAF5B,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBO,EAAc,mCAAG,WAAMD,GAAN,uFACLT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFvC,cACtBY,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdQ,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFpC,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,0HC5CjBS,EAAa,WACxB,OAAO,gBAAKC,IAAKC,EAAQC,IAAI,aAC9B,C,yGCFYC,EAAaC,EAAAA,QAAAA,GAAH,iJASVC,EAAiBD,EAAAA,QAAAA,GAAH,0iB,2LCAdE,EAAO,WAClB,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACQC,GAAiBC,EAAAA,EAAAA,KAAjBD,aAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBH,GAAa,GADG,mBAGKnB,EAAAA,EAAAA,MAHL,QAGRD,EAHQ,QAILwB,QAAQC,OAAS,GACxBN,EAAkBnB,EAAKwB,SALX,gDAQdE,EAAAA,OAAAA,KAAY,qCAAZ,gBAA8D,QARhD,yBAUdN,GAAa,GAVC,4EAAH,qDAafG,GAED,GAAE,KAGD,iCACE,mDACA,SAAC,IAAD,UACGL,EAAeO,OAAS,EACvBP,EAAeS,KAAI,SAAAC,GAAK,OACtB,SAAC,IAAD,WACE,UAAC,KAAD,CAAMC,GAAE,iBAAYD,EAAME,IAAMC,MAAO,CAAEC,KAAM,KAA/C,UACyB,OAAtBJ,EAAMK,aACL,gBACEvB,IAAG,yCAAoCkB,EAAMK,aAC7CrB,IAAKgB,EAAMM,SAGb,SAAC,IAAD,KAEF,uBAAIN,EAAMM,YAVON,EAAME,GADL,KAgBxB,wDAKT,EAED,W","sources":["api/Api.js","components/DefaultImg/DefaultImg.jsx","components/MoviesList/MoviesList.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async searchQuery => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n  };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`\n  );\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week',\n    language: 'en-US',\n  };\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","import poster from '../../img/poster.jpeg';\n\nexport const DefaultImg = () => {\n  return <img src={poster} alt=\"No poster\" />;\n};\n","import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  column-gap: 10px;\n  row-gap: 25px;\n`;\n\nexport const MoviesListItem = styled.li`\n  flex-basis: 290px;\n  text-align: center;\n  font-size: 22px;\n  padding-bottom: 5px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 20px) / 3);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 40px) / 5);\n  }\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n  img {\n    height: 600px;\n    margin-bottom: 5px;\n    object-fit: cover;\n    border-radius: 6px;\n    overflow: hidden;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchTrendingMovies } from 'api/Api';\nimport { useCustomContext } from 'context/Context';\nimport {\n  MoviesList,\n  MoviesListItem,\n} from 'components/MoviesList/MoviesList.styled';\nimport { DefaultImg } from 'components/DefaultImg/DefaultImg';\nimport { Report } from 'notiflix';\n\nexport const Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const { setIsLoading } = useCustomContext();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchTrendingMovies();\n        if (data.results.length > 0) {\n          setTrendingMovies(data.results);\n        }\n      } catch (error) {\n        Report.info('An error occurred, try again later', `${error}`, 'Okay');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today movies</h1>\n      <MoviesList>\n        {trendingMovies.length > 0 ? (\n          trendingMovies.map(movie => (\n            <MoviesListItem key={movie.id}>\n              <Link to={`movies/${movie.id}`} state={{ from: '/' }}>\n                {movie.poster_path !== null ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w400${movie.poster_path}`}\n                    alt={movie.title}\n                  />\n                ) : (\n                  <DefaultImg />\n                )}\n                <p>{movie.title}</p>\n              </Link>\n            </MoviesListItem>\n          ))\n        ) : (\n          <p>No trending movies found</p>\n        )}\n      </MoviesList>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","DefaultImg","src","poster","alt","MoviesList","styled","MoviesListItem","Home","useState","trendingMovies","setTrendingMovies","setIsLoading","useCustomContext","useEffect","getMovies","results","length","Report","map","movie","to","id","state","from","poster_path","title"],"sourceRoot":""}