{"version":3,"file":"static/js/278.82683b43.chunk.js","mappings":"+PAEMA,EAAU,mCAEHC,EAAkB,mCAAG,WAAOC,GAAP,gFAS1BC,EAAe,IAAIC,gBARV,CACbC,QAASL,EACTM,MAAOJ,EACPK,SAAU,QACVC,KAAM,EACNC,eAAe,IANe,SAUTC,EAAAA,EAAAA,IAAA,oDAAuDP,EAAaQ,aAV3D,cAU1BC,EAV0B,yBAWzBA,EAASC,MAXgB,2CAAH,sDAclBC,EAAmB,mCAAG,6FAC3BC,EAAS,CACbV,QAASL,EACTgB,WAAY,QACZC,YAAa,QAJkB,SAMVP,EAAAA,EAAAA,IAAA,gDAAmDK,EAAOC,WAA1D,YAAwED,EAAOE,YAA/E,oBAAsGF,EAAOV,UANnG,cAM3BO,EAN2B,yBAO1BA,EAASC,MAPiB,2CAAH,qDAUnBK,EAAiB,mCAAG,WAAOC,GAAP,uFACRT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,oBAAmEnB,IAD3D,cACzBY,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qD,gFC1BjBO,EAAgBC,EAAAA,QAAAA,IAAH,oNAUbC,EAAUD,EAAAA,QAAAA,IAAH,sZ,SCVPE,EAAS,kBACpB,SAACH,EAAD,WACE,SAACE,EAAD,KAFkB,C,+JCITE,EAAS,WACpB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOvB,EAAP,KAAoB0B,EAApB,KACA,GAA0CH,EAAAA,EAAAA,UAAS,IAAnD,eAAOI,EAAP,KAAsBC,EAAtB,KACA,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAsCnB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAa,GADG,mBAGKhC,EAAAA,EAAAA,IAAmBC,GAHxB,OAIc,KADtBW,EAHQ,QAILuB,QAAQC,OACfC,QAAQC,IAAI,mBAEZT,EAAiBjB,EAAKuB,SAPV,gDAUdE,QAAQC,IAAR,kEAVc,yBAYdN,GAAa,GAZC,4EAAH,qDAeX/B,GACFiC,GAGH,GAAE,CAACjC,KAGF,iCACE,kBAAMsC,SAlCW,SAACC,GACpBA,EAAEC,iBACF,IAAMxC,EAAcwB,EAAWiB,OAAOC,cACjC1C,EAIL0B,EAAe1B,GAHXoC,QAAQC,IAAI,4BAIjB,EA0BG,WACE,kBACAM,KAAK,OACDC,aAAa,MACbC,WAAS,EACTC,YAAY,2BAChBC,MAAOvB,EACPwB,SA7Ce,SAACT,GACpBd,EAAcc,EAAEU,OAAOF,MACxB,KA4CG,mBAAQJ,KAAK,cAEZb,IAAa,SAAC,IAAD,KACd,wBACGH,EAAcQ,OAAS,EACtBR,EAAcuB,KAAI,SAAAC,GAAK,OACrB,yBACE,4BACE,gBACEC,IAAG,0CAAqCD,EAAME,aAC9CC,IAAKH,EAAMI,kBAEb,SAAC,KAAD,CAAMC,GAAE,iBAAYL,EAAMM,IAA1B,SAAiCN,EAAMI,qBANlCJ,EAAMM,GADM,KAYvB,+CAKT,EAED,W","sources":["api/Api.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n\n    };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(`https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`);\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week'\n  };\n  const response = await axios.get(`https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`);\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n}","import styled from 'styled-components';\n\nexport const LoaderOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 500ms linear, visibility 500ms linear;\n`;\n\nexport const Spinner = styled.div`\n  position: absolute;\n  top: calc(50% - 60px);\n  left: calc(50% - 60px);\n  width: 120px;\n  border: 16px solid #3f51b5;\n  border-top: 16px solid rgba(174, 175, 165, 1);\n  border-radius: 50%;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { LoaderOverlay, Spinner } from \"./Loader.styled\";\n\nexport const Loader = () => (\n  <LoaderOverlay>\n    <Spinner />\n  </LoaderOverlay>\n);\n\n\n// //React-loader-spinner\n// import { ColorRing } from 'react-loader-spinner';\n\n// export const Loader = () => (\n//   <ColorRing\n//     visible={true}\n//     height=\"80px\"\n//     width=\"80px\"\n//     ariaLabel=\"blocks-loading\"\n//     wrapperStyle={{\n//       position: \"fixed\",\n//       top: 0,\n//       width: \"100vw\",\n//       height: \"100vh\",\n//       overflowY: \"auto\",\n//       backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n//       transition: \"opacity 500ms linear, visibility 500ms linear\"}}\n//     wrapperClass=\"blocks-wrapper\"\n//     colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n//   />\n// );\n","import { useEffect, useState } from 'react';\nimport { useCustomContext } from 'context/Context';\nimport { Link } from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'api/Api';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Movies = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n  const { isLoading, setIsLoading } = useCustomContext();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim().toLowerCase();\n    if (!searchQuery) {\n        console.log(\"Please enter search query\");\n        return\n    };\n    setSearchQuery(searchQuery);\n  }\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchMoviesByQuery(searchQuery);\n        if (data.results.length === 0) {\n          console.log('No movies found');\n        } else {\n          setMoviesByQuery(data.results);\n        }\n      } catch (error) {\n        console.log(`Oops, something went wrong. ${error}. Try again later.`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (searchQuery) {\n      getMovies();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n        type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n        value={inputValue}\n        onChange={handleChange}/>\n      <button type=\"submit\"></button>\n      </form>\n      {isLoading && <Loader />}\n      <ul>\n        {moviesByQuery.length > 0 ? (\n          moviesByQuery.map(movie => (\n            <li key={movie.id}>\n              <div>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                  alt={movie.original_title}\n                />\n                <Link to={`movies/${movie.id}`}>{movie.original_title}</Link>\n              </div>\n            </li>\n          ))\n        ) : (\n          <p>No movies found</p>\n        )}\n      </ul>\n      </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","LoaderOverlay","styled","Spinner","Loader","Movies","useState","inputValue","setInputValue","setSearchQuery","moviesByQuery","setMoviesByQuery","useCustomContext","isLoading","setIsLoading","useEffect","getMovies","results","length","console","log","onSubmit","e","preventDefault","trim","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","target","map","movie","src","poster_path","alt","original_title","to","id"],"sourceRoot":""}