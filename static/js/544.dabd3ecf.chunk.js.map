{"version":3,"file":"static/js/544.dabd3ecf.chunk.js","mappings":"mTAEMA,EAAU,mCAEHC,EAAkB,mCAAG,WAAOC,GAAP,gFAS1BC,EAAe,IAAIC,gBARV,CACbC,QAASL,EACTM,MAAOJ,EACPK,SAAU,QACVC,KAAM,EACNC,eAAe,IANe,SAUTC,EAAAA,EAAAA,IAAA,oDAAuDP,EAAaQ,aAV3D,cAU1BC,EAV0B,yBAWzBA,EAASC,MAXgB,2CAAH,sDAclBC,EAAmB,mCAAG,6FAC3BC,EAAS,CACbV,QAASL,EACTgB,WAAY,QACZC,YAAa,OACbV,SAAU,SALqB,SAOVG,EAAAA,EAAAA,IAAA,gDAAmDK,EAAOC,WAA1D,YAAwED,EAAOE,YAA/E,oBAAsGF,EAAOV,UAPnG,cAO3BO,EAP2B,yBAQ1BA,EAASC,MARiB,2CAAH,qDAWnBK,EAAiB,mCAAG,WAAOC,GAAP,uFACRT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,oBAAmEnB,IAD3D,cACzBY,EADyB,yBAExBA,EAASC,MAFe,2CAAH,sDAKjBO,EAAc,mCAAG,WAAOD,GAAP,uFACLT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,4BAA2EnB,IADtE,cACtBY,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKdQ,EAAiB,mCAAG,WAAOF,GAAP,uFACRT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,4BAA2EnB,IADnE,cACzBY,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qD,kFCrCjBS,EAAgBC,EAAAA,QAAAA,IAAH,oNAUbC,EAAUD,EAAAA,QAAAA,IAAH,sZ,SCVPE,EAAS,kBACpB,SAACH,EAAD,WACE,SAACE,EAAD,KAFkB,C,yGCATE,EAAaH,EAAAA,QAAAA,GAAH,8HASVI,EAAiBJ,EAAAA,QAAAA,GAAH,8V,iLCJdK,EAAO,WAClB,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAsBnB,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAa,GADG,mBAGKpB,EAAAA,EAAAA,MAHL,OAIc,KADtBD,EAHQ,QAILwB,QAAQC,OACfC,QAAQC,IAAI,mBAEZT,EAAkBlB,EAAKwB,SAPX,gDAUdE,QAAQC,IAAR,kEAVc,yBAYdN,GAAa,GAZC,4EAAH,qDAefE,GAED,GAAE,KAGD,iCACE,4CACCH,IAAa,SAAC,IAAD,KACd,SAAC,IAAD,UACGH,EAAeQ,OAAS,EACvBR,EAAeW,KAAI,SAAAC,GAAK,OAAK,SAAC,IAAD,WAA+B,UAAC,KAAD,CAAMC,GAAE,iBAAYD,EAAME,IAAMC,MAAO,CAAEC,KAAM,KAA/C,WAAsD,gBAAKC,IAAG,yCAAoCL,EAAMM,aAAeC,IAAKP,EAAMQ,SAAS,uBAAIR,EAAMQ,YAA/JR,EAAME,GAAhC,KAAgO,cAAG,aAAW,SAAd,0CAIjQ,EAED,W","sources":["api/Api.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n\n    };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(`https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`);\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week',\n    language: 'en-US'\n  };\n  const response = await axios.get(`https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`);\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieReviews = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`);\n  return response.data;\n}","import styled from 'styled-components';\n\nexport const LoaderOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 500ms linear, visibility 500ms linear;\n`;\n\nexport const Spinner = styled.div`\n  position: absolute;\n  top: calc(50% - 60px);\n  left: calc(50% - 60px);\n  width: 120px;\n  border: 16px solid #3f51b5;\n  border-top: 16px solid rgba(174, 175, 165, 1);\n  border-radius: 50%;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { LoaderOverlay, Spinner } from \"./Loader.styled\";\n\nexport const Loader = () => (\n  <LoaderOverlay>\n    <Spinner />\n  </LoaderOverlay>\n);\n\n\n// //React-loader-spinner\n// import { ColorRing } from 'react-loader-spinner';\n\n// export const Loader = () => (\n//   <ColorRing\n//     visible={true}\n//     height=\"80px\"\n//     width=\"80px\"\n//     ariaLabel=\"blocks-loading\"\n//     wrapperStyle={{\n//       position: \"fixed\",\n//       top: 0,\n//       width: \"100vw\",\n//       height: \"100vh\",\n//       overflowY: \"auto\",\n//       backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n//       transition: \"opacity 500ms linear, visibility 500ms linear\"}}\n//     wrapperClass=\"blocks-wrapper\"\n//     colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n//   />\n// );\n","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\nwidth: 100%;\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\ngap: 10px;\nrow-gap: 25px;\n`;\n\nexport const MoviesListItem = styled.li`\nflex-basis: calc((100% - 40px)/5);\ntext-align: center;\nfont-size: 22px;\npadding-bottom: 5px;\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover{\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n  img {\n  margin-bottom: 5px;\n  object-fit: cover;\n  border-radius: 6px;\n  overflow: hidden;\n}\n`","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {fetchTrendingMovies} from 'api/Api'\nimport { Loader } from \"components/Loader/Loader\";\nimport { useCustomContext } from \"context/Context\";\nimport { MoviesList, MoviesListItem } from \"components/MoviesList/MoviesList.styled\";\n\nexport const Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const { isLoading, setIsLoading } = useCustomContext();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchTrendingMovies();\n        if (data.results.length === 0) {\n          console.log('No movies found');\n        } else {\n          setTrendingMovies(data.results);\n        }\n      } catch (error) {\n        console.log(`Oops, something went wrong. ${error}. Try again later.`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  \n  return (\n    <>\n      <h1>Trending Movies</h1>\n      {isLoading && <Loader/>}\n      <MoviesList>\n        {trendingMovies.length > 0 ?\n          trendingMovies.map(movie => (<MoviesListItem key={movie.id}><Link to={`movies/${movie.id}`} state={{ from: \"/\" }}><img src={`https://image.tmdb.org/t/p/w400${movie.poster_path}`} alt={movie.title} /><p>{movie.title}</p></Link></MoviesListItem>)) : <p text-align=\"center\">No trending movies found</p> }\n      </MoviesList>\n    </>\n  )\n};\n\nexport default Home;"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","LoaderOverlay","styled","Spinner","Loader","MoviesList","MoviesListItem","Home","useState","trendingMovies","setTrendingMovies","useCustomContext","isLoading","setIsLoading","useEffect","getMovies","results","length","console","log","map","movie","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}