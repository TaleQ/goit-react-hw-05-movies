{"version":3,"file":"static/js/310.fa78b4ea.chunk.js","mappings":"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","sources":["api/Api.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n\n    };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(`https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`);\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week',\n    language: 'en-US'\n  };\n  const response = await axios.get(`https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`);\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieReviews = async (movieId) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`);\n  return response.data;\n}","import styled from 'styled-components';\n\nexport const LoaderOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 500ms linear, visibility 500ms linear;\n`;\n\nexport const Spinner = styled.div`\n  position: absolute;\n  top: calc(50% - 60px);\n  left: calc(50% - 60px);\n  width: 120px;\n  border: 16px solid #3f51b5;\n  border-top: 16px solid rgba(174, 175, 165, 1);\n  border-radius: 50%;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { LoaderOverlay, Spinner } from \"./Loader.styled\";\n\nexport const Loader = () => (\n  <LoaderOverlay>\n    <Spinner />\n  </LoaderOverlay>\n);\n\n\n// //React-loader-spinner\n// import { ColorRing } from 'react-loader-spinner';\n\n// export const Loader = () => (\n//   <ColorRing\n//     visible={true}\n//     height=\"80px\"\n//     width=\"80px\"\n//     ariaLabel=\"blocks-loading\"\n//     wrapperStyle={{\n//       position: \"fixed\",\n//       top: 0,\n//       width: \"100vw\",\n//       height: \"100vh\",\n//       overflowY: \"auto\",\n//       backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n//       transition: \"opacity 500ms linear, visibility 500ms linear\"}}\n//     wrapperClass=\"blocks-wrapper\"\n//     colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n//   />\n// );\n","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\nwidth: 100%;\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\ngap: 10px;\nrow-gap: 25px;\n`;\n\nexport const MoviesListItem = styled.li`\nflex-basis: calc((100% - 40px)/5);\ntext-align: center;\nfont-size: 22px;\npadding-bottom: 5px;\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover{\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n  img {\n  margin-bottom: 5px;\n  object-fit: cover;\n  border-radius: 6px;\n  overflow: hidden;\n}\n`","import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\ndisplay: flex;\njustify-content: center;\nmargin-top: 20px;\nmargin-bottom: 20px;\n`;\n\nexport const SearchInput = styled.input`\nwidth: 280px;\nheight: 34px;\ncaret-color:  #003399;\n`;\n\nexport const SearchButon = styled.button`\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #141e58;\n  border: 0;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  outline: none;\n  &:hover{\n    opacity: 1;\n  }\n`\n","import { useEffect, useState } from 'react';\nimport { useCustomContext } from 'context/Context';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'api/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList, MoviesListItem } from 'components/MoviesList/MoviesList.styled';\nimport { SearchForm, SearchButon, SearchInput } from './Movies.styled';\nimport { TfiSearch } from \"react-icons/tfi\";\n\nexport const Movies = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n  const { isLoading, setIsLoading } = useCustomContext();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get(\"query\");\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim().toLowerCase();\n    if (!searchQuery) {\n        console.log(\"Please enter search query\");\n        return\n    };\n    setSearchParams({ query: searchQuery });\n    setInputValue('');\n  }\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchMoviesByQuery(searchQuery);\n        if (data.results.length === 0) {\n          console.log('No movies found');\n        } else {\n          setMoviesByQuery(data.results);\n        }\n      } catch (error) {\n        console.log(`Oops, something went wrong. ${error}. Try again later.`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (searchQuery) {\n      getMovies();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit}>\n          <SearchInput\n        type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n        value={inputValue}\n        onChange={handleChange}/>\n        <SearchButon type=\"submit\">\n          <TfiSearch fill=\"#ffffff\"/>\n      </SearchButon>\n      </SearchForm>\n      {isLoading && <Loader />}\n      <MoviesList>\n        {moviesByQuery.length > 0 ? (\n          moviesByQuery.map(movie => (\n            <MoviesListItem key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: `/movies?query=${searchQuery}` }}><img\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                  alt={movie.title}\n                /><p>{movie.title}</p></Link>\n            </MoviesListItem>\n          ))\n        ) : null}\n      </MoviesList>\n      </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","LoaderOverlay","styled","Spinner","Loader","MoviesList","MoviesListItem","SearchForm","SearchInput","SearchButon","Movies","useState","inputValue","setInputValue","moviesByQuery","setMoviesByQuery","useCustomContext","isLoading","setIsLoading","useSearchParams","setSearchParams","get","useEffect","getMovies","results","length","console","log","onSubmit","e","preventDefault","trim","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","target","fill","map","movie","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}