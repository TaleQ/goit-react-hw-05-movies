{"version":3,"file":"static/js/40.8b005bf9.chunk.js","mappings":"kTAEMA,EAAU,mCAEHC,EAAkB,mCAAG,WAAMC,GAAN,gFAQ1BC,EAAe,IAAIC,gBAPV,CACbC,QAASL,EACTM,MAAOJ,EACPK,SAAU,QACVC,KAAM,EACNC,eAAe,IANe,SASTC,EAAAA,EAAAA,IAAA,oDACwBP,EAAaQ,aAV5B,cAS1BC,EAT0B,yBAYzBA,EAASC,MAZgB,2CAAH,sDAelBC,EAAmB,mCAAG,6FAC3BC,EAAS,CACbV,QAASL,EACTgB,WAAY,QACZC,YAAa,OACbV,SAAU,SALqB,SAOVG,EAAAA,EAAAA,IAAA,gDACoBK,EAAOC,WAD3B,YACyCD,EAAOE,YADhD,oBACuEF,EAAOV,UARpE,cAO3BO,EAP2B,yBAU1BA,EAASC,MAViB,2CAAH,qDAanBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,oBACoCnB,IAF5B,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBO,EAAc,mCAAG,WAAMD,GAAN,uFACLT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFvC,cACtBY,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdQ,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,4BAC4CnB,IAFpC,cACzBY,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,0HC5CjBS,EAAa,WACxB,OAAO,gBAAKC,IAAKC,EAAQC,IAAI,aAC9B,C,kFCFYC,EAAgBC,EAAAA,QAAAA,IAAH,oNAUbC,EAAUD,EAAAA,QAAAA,IAAH,sZ,SCVPE,EAAS,kBACpB,SAACH,EAAD,WACE,SAACE,EAAD,KAFkB,C,yGCATE,EAAaH,EAAAA,QAAAA,GAAH,iJASVI,EAAiBJ,EAAAA,QAAAA,GAAH,0iB,0OCTdK,EAAaL,EAAAA,QAAAA,KAAH,2GAOVM,EAAcN,EAAAA,QAAAA,MAAH,8EAMXO,EAAcP,EAAAA,QAAAA,OAAH,gX,sCCIXQ,EAAS,WACpB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAEA,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOzC,EAAP,KAAqB0C,EAArB,KACM3C,EAAcC,EAAa2C,IAAI,SAE/BC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MA2CjB,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBT,GAAa,GADG,mBAGK1C,EAAAA,EAAAA,IAAmBC,GAHxB,OAIc,KADtBW,EAHQ,QAILwC,QAAQC,QACfC,EAAAA,OAAAA,QAAe,kBAAmB,CAAEC,QAAS,MAC7ChB,EAAiB,IACjBiB,YAAW,WACTR,EAASF,EAASW,SACnB,GAAE,QAEHlB,EAAiB3B,EAAKwC,SAXV,gDAcdM,EAAAA,OAAAA,KAAY,qCAAZ,gBAA8D,QAdhD,yBAgBdhB,GAAa,GAhBC,4EAAH,qDAmBXzC,GACFkD,GAGH,GAAE,CAAClD,KAGF,iCACE,UAAC8B,EAAD,CAAY4B,SAvCK,SAAAC,GACnBA,EAAEC,iBACF,IAAM5D,EAAcmC,EAAW0B,OAAOC,cACjC9D,GAIL2C,EAAgB,CAAEvC,MAAOJ,IACzBoC,EAAc,KAJZiB,EAAAA,OAAAA,KAAY,4BAKf,EA8BG,WACE,SAACtB,EAAD,CACEgC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOhC,EACPiC,SAlDa,SAAAT,GACnBvB,EAAcuB,EAAEU,OAAOF,MACxB,KAkDK,SAACnC,EAAD,CAAa+B,KAAK,SAAlB,UACE,SAAC,MAAD,CAAWO,KAAK,iBAGnB9B,IAAa,SAACb,EAAA,EAAD,KACd,SAAC,IAAD,UACGU,EAAce,OAAS,EACpBf,EAAckC,KAAI,SAAAC,GAAK,OACrB,SAAC,IAAD,WACE,UAAC,KAAD,CACEC,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,KAAK,iBAAD,OAAmB5E,IAFlC,UAIyB,OAAtBwE,EAAMK,aACL,gBACExD,IAAG,0CAAqCmD,EAAMK,aAC9CtD,IAAKiD,EAAMM,SAGb,SAAC1D,EAAA,EAAD,KAEF,uBAAIoD,EAAMM,YAbON,EAAME,GADN,IAkBvB,SAIX,EAED,G","sources":["api/Api.js","components/DefaultImg/DefaultImg.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d4ece4211ac8e35ee810dac1072ece6';\n\nexport const fetchMoviesByQuery = async searchQuery => {\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n    language: 'en-US',\n    page: 1,\n    include_adult: false,\n  };\n  const searchParams = new URLSearchParams(params);\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?${searchParams.toString()}`\n  );\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const params = {\n    api_key: API_KEY,\n    media_type: 'movie',\n    time_window: 'week',\n    language: 'en-US',\n  };\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/${params.media_type}/${params.time_window}?api_key=${params.api_key}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","import poster from '../../img/poster.jpeg';\n\nexport const DefaultImg = () => {\n  return <img src={poster} alt=\"No poster\" />;\n};\n","import styled from 'styled-components';\n\nexport const LoaderOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: opacity 500ms linear, visibility 500ms linear;\n`;\n\nexport const Spinner = styled.div`\n  position: absolute;\n  top: calc(50% - 60px);\n  left: calc(50% - 60px);\n  width: 120px;\n  border: 16px solid #3f51b5;\n  border-top: 16px solid rgba(174, 175, 165, 1);\n  border-radius: 50%;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { LoaderOverlay, Spinner } from './Loader.styled';\n\nexport const Loader = () => (\n  <LoaderOverlay>\n    <Spinner />\n  </LoaderOverlay>\n);\n","import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  column-gap: 10px;\n  row-gap: 25px;\n`;\n\nexport const MoviesListItem = styled.li`\n  flex-basis: 290px;\n  text-align: center;\n  font-size: 22px;\n  padding-bottom: 5px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 20px) / 3);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 40px) / 5);\n  }\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n  img {\n    height: 600px;\n    margin-bottom: 5px;\n    object-fit: cover;\n    border-radius: 6px;\n    overflow: hidden;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\ndisplay: flex;\njustify-content: center;\nmargin-top: 20px;\nmargin-bottom: 20px;\n`;\n\nexport const SearchInput = styled.input`\nwidth: 280px;\nheight: 34px;\ncaret-color:  #003399;\n`;\n\nexport const SearchButon = styled.button`\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #141e58;\n  border: 0;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  outline: none;\n  &:hover{\n    opacity: 1;\n  }\n`\n","import { useEffect, useState } from 'react';\nimport { useCustomContext } from 'context/Context';\nimport {\n  Link,\n  useSearchParams,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'api/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  MoviesList,\n  MoviesListItem,\n} from 'components/MoviesList/MoviesList.styled';\nimport { SearchForm, SearchButon, SearchInput } from './Movies.styled';\nimport { TfiSearch } from 'react-icons/tfi';\nimport { Notify, Report } from 'notiflix';\nimport { DefaultImg } from 'components/DefaultImg/DefaultImg';\n\nexport const Movies = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n\n  const { isLoading, setIsLoading } = useCustomContext();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim().toLowerCase();\n    if (!searchQuery) {\n      Notify.info('Please enter search query');\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n    setInputValue('');\n  };\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchMoviesByQuery(searchQuery);\n        if (data.results.length === 0) {\n          Notify.failure('No movies found', { timeout: 700 });\n          setMoviesByQuery([]);\n          setTimeout(() => {\n            navigate(location.pathname);\n          }, '700');\n        } else {\n          setMoviesByQuery(data.results);\n        }\n      } catch (error) {\n        Report.info('An error occurred, try again later', `${error}`, 'Okay');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (searchQuery) {\n      getMovies();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={inputValue}\n          onChange={handleChange}\n        />\n        <SearchButon type=\"submit\">\n          <TfiSearch fill=\"#ffffff\" />\n        </SearchButon>\n      </SearchForm>\n      {isLoading && <Loader />}\n      <MoviesList>\n        {moviesByQuery.length > 0\n          ? moviesByQuery.map(movie => (\n              <MoviesListItem key={movie.id}>\n                <Link\n                  to={`${movie.id}`}\n                  state={{ from: `/movies?query=${searchQuery}` }}\n                >\n                  {movie.poster_path !== null ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w400/${movie.poster_path}`}\n                      alt={movie.title}\n                    />\n                  ) : (\n                    <DefaultImg />\n                  )}\n                  <p>{movie.title}</p>\n                </Link>\n              </MoviesListItem>\n            ))\n          : null}\n      </MoviesList>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","fetchMoviesByQuery","searchQuery","searchParams","URLSearchParams","api_key","query","language","page","include_adult","axios","toString","response","data","fetchTrendingMovies","params","media_type","time_window","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","DefaultImg","src","poster","alt","LoaderOverlay","styled","Spinner","Loader","MoviesList","MoviesListItem","SearchForm","SearchInput","SearchButon","Movies","useState","inputValue","setInputValue","moviesByQuery","setMoviesByQuery","useCustomContext","isLoading","setIsLoading","useSearchParams","setSearchParams","get","location","useLocation","navigate","useNavigate","useEffect","getMovies","results","length","Notify","timeout","setTimeout","pathname","Report","onSubmit","e","preventDefault","trim","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","target","fill","map","movie","to","id","state","from","poster_path","title"],"sourceRoot":""}